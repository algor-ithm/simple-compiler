Skipped: CLASS
Skipped: LargestCommonDenominator
Top op to compare ;
CurrentOp to compare {
Relation: <
Shifted { onto the stack
Skipped: CONST
Skipped: M
Skipped: =
Skipped: Lit7
Skipped: ,
Skipped: N
Skipped: =
Skipped: Lit85
Skipped: ;
Skipped: VAR
Skipped: X
Skipped: ,
Skipped: Y
Skipped: ,
Skipped: Z
Skipped: ,
Skipped: Q
Skipped: ,
Skipped: R
Skipped: ;
Top op to compare {
CurrentOp to compare {
Relation: <
Shifted { onto the stack
Skipped: VAR
Skipped: W
Skipped: ;
Shifted R onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted X onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare ,
Relation: >

X IDENTIFIER
= ASSIGN
R IDENTIFIER
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,R,X,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ,
Shifted Q onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted Lit0 onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare ,
Relation: >

Lit0 NUMERIC_LITERAL
= ASSIGN
Q IDENTIFIER
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,Q,Lit0,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ,
Shifted W onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted Y onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare ;
Relation: >

Y IDENTIFIER
= ASSIGN
W IDENTIFIER
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,W,Y,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ;
Top op to compare {
CurrentOp to compare WHILE
Relation: <
Shifted WHILE onto the stack
Handling WHILE
Shifted W onto the stack (NON-OP)
Top op to compare WHILE
CurrentOp to compare <=
Relation: <
Shifted <= onto the stack
Shifted R onto the stack (NON-OP)
Top op to compare <=
CurrentOp to compare DO
Relation: >

R IDENTIFIER
<= RELOP
W IDENTIFIER
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: <=,W,R,?
Reducing boolean operation
Top op to compare WHILE
CurrentOp to compare DO
Handling DO
L1
Shifted W onto the stack (NON-OP)
Top op to compare DO
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted Lit2 onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare *
Relation: <
Shifted * onto the stack
Shifted W onto the stack (NON-OP)
Top op to compare *
CurrentOp to compare ;
Relation: >

W IDENTIFIER
* MULOP
Lit2 NUMERIC_LITERAL
= ASSIGN
W IDENTIFIER
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: *,Lit2,W,T1
Reducing arithmetic opeartion
Top op to compare =
CurrentOp to compare ;

T1 IDENTIFIER
= ASSIGN
W IDENTIFIER
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,W,T1,?
Reducing assignment opeartion
Top op to compare DO
CurrentOp to compare ;
Popping off WHILE DO

{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER
Top op to compare {
CurrentOp to compare WHILE
Relation: <
Shifted WHILE onto the stack
Handling WHILE
Shifted W onto the stack (NON-OP)
Top op to compare WHILE
CurrentOp to compare >
Relation: <
Shifted > onto the stack
Shifted Y onto the stack (NON-OP)
Top op to compare >
CurrentOp to compare DO
Relation: >

Y IDENTIFIER
> RELOP
W IDENTIFIER
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: >,W,Y,?
Reducing boolean operation
Top op to compare WHILE
CurrentOp to compare DO
Handling DO
L2
Top op to compare DO
CurrentOp to compare {
Relation: <
Shifted { onto the stack
Shifted Q onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted Lit2 onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare *
Relation: <
Shifted * onto the stack
Shifted Q onto the stack (NON-OP)
Top op to compare *
CurrentOp to compare ;
Relation: >

Q IDENTIFIER
* MULOP
Lit2 NUMERIC_LITERAL
= ASSIGN
Q IDENTIFIER
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: *,Lit2,Q,T2
Reducing arithmetic opeartion
Top op to compare =
CurrentOp to compare ;

T2 IDENTIFIER
= ASSIGN
Q IDENTIFIER
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,Q,T2,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ;
Shifted W onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted W onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare /
Relation: <
Shifted / onto the stack
Shifted Lit2 onto the stack (NON-OP)
Top op to compare /
CurrentOp to compare ;
Relation: >

Lit2 NUMERIC_LITERAL
/ DIVOP
W IDENTIFIER
= ASSIGN
W IDENTIFIER
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: /,W,Lit2,T3
Reducing arithmetic opeartion
Top op to compare =
CurrentOp to compare ;

T3 IDENTIFIER
= ASSIGN
W IDENTIFIER
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,W,T3,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ;
Top op to compare {
CurrentOp to compare IF
Relation: <
Shifted IF onto the stack
Handling IF
Shifted W onto the stack (NON-OP)
Top op to compare IF
CurrentOp to compare <=
Relation: <
Shifted <= onto the stack
Shifted R onto the stack (NON-OP)
Top op to compare <=
CurrentOp to compare THEN
Relation: >

R IDENTIFIER
<= RELOP
W IDENTIFIER
IF IF
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: <=,W,R,?
Reducing boolean operation
Top op to compare IF
CurrentOp to compare THEN
Handling THEN
L3
L2
Top op to compare THEN
CurrentOp to compare {
Relation: <
Shifted { onto the stack
Shifted R onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted R onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare -
Relation: <
Shifted - onto the stack
Shifted W onto the stack (NON-OP)
Top op to compare -
CurrentOp to compare ;
Relation: >

W IDENTIFIER
- SUBOP
R IDENTIFIER
= ASSIGN
R IDENTIFIER
{ LEFT_BRACE
THEN THEN
IF IF
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: -,R,W,T4
Reducing arithmetic opeartion
Top op to compare =
CurrentOp to compare ;

T4 IDENTIFIER
= ASSIGN
R IDENTIFIER
{ LEFT_BRACE
THEN THEN
IF IF
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,R,T4,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ;
Shifted Q onto the stack (NON-OP)
Top op to compare {
CurrentOp to compare =
Relation: <
Shifted = onto the stack
Shifted Q onto the stack (NON-OP)
Top op to compare =
CurrentOp to compare +
Relation: <
Shifted + onto the stack
Shifted Lit1 onto the stack (NON-OP)
Top op to compare +
CurrentOp to compare ;
Relation: >

Lit1 NUMERIC_LITERAL
+ ADDOP
Q IDENTIFIER
= ASSIGN
Q IDENTIFIER
{ LEFT_BRACE
THEN THEN
IF IF
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: +,Q,Lit1,T5
Reducing arithmetic opeartion
Top op to compare =
CurrentOp to compare ;

T5 IDENTIFIER
= ASSIGN
Q IDENTIFIER
{ LEFT_BRACE
THEN THEN
IF IF
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Reduction function called
Created quad: =,Q,T5,?
Reducing assignment opeartion
Top op to compare {
CurrentOp to compare ;
Top op to compare {
CurrentOp to compare }
Relation: =
Shifted } onto the stack
Reducing braces


} RIGHT_BRACE
{ LEFT_BRACE
THEN THEN
IF IF
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Popping IF THEN off stack.
Top op to compare {
CurrentOp to compare }
Relation: =
Shifted } onto the stack
Reducing braces


} RIGHT_BRACE
{ LEFT_BRACE
DO DO
WHILE WHILE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Popping off WHILE DO

{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER
Top op to compare {
CurrentOp to compare }
Relation: =
Shifted } onto the stack
Reducing braces


} RIGHT_BRACE
{ LEFT_BRACE
{ LEFT_BRACE
; DELIMITER

Top op to compare {
CurrentOp to compare }
Relation: =
Shifted } onto the stack
Reducing braces


} RIGHT_BRACE
{ LEFT_BRACE
; DELIMITER


Done parsing!

; DELIMITER

=, R, X, ?
=, Q, Lit0, ?
=, W, Y, ?
WHILE, W1, ?, ?
<=, W, R, ?
DO, L1, G, ?
*, Lit2, W, T1
=, W, T1, ?
W1, WLABEL, ?, ?
L1, JLABEL, ?, ?
WHILE, W2, ?, ?
>, W, Y, ?
DO, L2, LE, ?
*, Lit2, Q, T2
=, Q, T2, ?
/, W, Lit2, T3
=, W, T3, ?
IF, ?, ?, ?
<=, W, R, ?
THEN, L3, G, ?
-, R, W, T4
=, R, T4, ?
+, Q, Lit1, T5
=, Q, T5, ?
L3, JLABEL, ?, ?
W2, WLABEL, ?, ?
L2, JLABEL, ?, ?
