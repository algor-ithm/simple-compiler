     1                                  ; Definitions for Linux
     2                                  sys_exit	equ	1
     3                                  sys_read	equ	3
     4                                  sys_write	equ	4
     5                                  stdin		equ	0
     6                                  stdout		equ	1
     7                                  stderr		equ	3
     8                                  
     9                                  section .data
    10 00000000 456E74657220616E20-     	userMsg			db	'Enter an integer(less than 32,765): '
    10 00000009 696E7465676572286C-
    10 00000012 657373207468616E20-
    10 0000001B 33322C373635293A20 
    11                                  	lenUserMsg		equ	$ - userMsg
    12 00000024 596F7520656E746572-     	displayMsg		db	'You entered: '
    12 0000002D 65643A20           
    13                                  	lenDisplayMsg	equ	$ - displayMsg
    14                                  
    15 00000031 0A                      	newline	db	0xA
    16 00000032 0A                      	Ten	db	10
    17                                  
    18 00000033 416E73203D20            	Result		db	'Ans = '
    19 00000039 6161616161              	ResultValue	db	'aaaaa'
    20 0000003E 0A                      				db	0xA
    21                                  	ResultEnd	equ	$ - Results
    21          ******************       error: symbol `Results' not defined
    22                                  
    23 0000003F 414243444546-           	num		times 6 db 'ABCDEF'
    23 0000003F <rep 6h>           
    24                                  	numEnd	equ	$ - num
    25                                  
    26 00000063 0700                    	M		DW	7
    27 00000065 5500                    	N		DW	85
    28 00000067 0C00                    	Lit12	DW	12
    29                                  
    30                                  section .bss
    31 00000000 ??                      	TempChar	RESB	1
    32 00000001 ??                      	testchar	RESB	1
    33 00000002 ????                    	ReadInt		RESW	1
    34 00000004 ????                    	tempint		RESW	1
    35 00000006 ??                      	negflag		RESB	1
    36                                  
    37 00000007 ????                    	X		RESW	1
    38 00000009 ????                    	Y		RESW	1
    39 0000000B ????                    	Z		RESW	1
    40 0000000D ????                    	T1		RESW	1
    41 0000000F ????                    	T2		RESW	1
    42 00000011 ????                    	T3		RESW	1
    43 00000013 ????                    	T4		RESW	1
    44                                  
    45                                  
    46                                  ; Start of program
    47                                  	global _start
    48                                  section .text
    49                                  
    50 00000000 90                      _start: nop
    51                                  
    52                                  ; =========Process Quads Put Assembly Here=========
    53                                  
    54 00000001 E896000000              	call	PrintString
    55 00000006 E8B0000000              	call	GetAnInteger
    56 0000000B 66A1[02000000]          	mov ax, [ReadInt]
    57 00000011 66A3[09000000]          	mov [Y], ax			; Read Y
    58                                  
    59 00000017 E880000000              	call	PrintString
    60 0000001C E89A000000              	call	GetAnInteger
    61 00000021 66A1[02000000]          	mov ax, [ReadInt]
    62 00000027 66A3[0B000000]          	mov [Z], ax			; Read Z
    63                                  
    64 0000002D 66A1[09000000]          	mov ax, [Y]
    65 00000033 66F725[0B000000]        	mul word [Z]
    66 0000003A 66A3[0D000000]          	mov [T1], ax
    67                                  
    68 00000040 66A1[63000000]          	mov ax, [M]
    69 00000046 660305[0D000000]        	add ax, [T1]
    70 0000004D 66A3[0F000000]          	mov [T2], ax
    71                                  
    72 00000053 66A1[0F000000]          	mov ax, [T2]
    73 00000059 660305[67000000]        	add ax, [Lit12]
    74 00000060 66A3[11000000]          	mov [T3], ax
    75                                  
    76 00000066 66A1[11000000]          	mov ax, [T3]
    77 0000006C 66A3[07000000]          	mov [X], ax
    78                                  
    79 00000072 66A1[07000000]          	mov ax, [X]		 ; Write X
    80 00000078 E89F000000              	call ConvertIntegerToString
    81 0000007D B804000000              	mov eax, 4
    82 00000082 BB01000000              	mov ebx, 1
    83 00000087 B9[33000000]            	mov ecx, Result
    84 0000008C BA00000000              	mov edx, ResultEnd
    85 00000091 CD80                    	int 80h
    86                                  
    87                                  
    88                                  ; exit code
    89                                  fini:
    90 00000093 B801000000              	mov eax, sys_exit
    91 00000098 31DB                    	xor ebx, ebx
    92 0000009A CD80                    	int 80h
    93                                  
    94                                  ; End Pgm3.asm
    95                                  
    96                                  
    97                                  ; PrintString	PROC
    98                                  PrintString:
    99 0000009C 6650                    	push	ax
   100 0000009E 6652                    	push	dx
   101 000000A0 B804000000              	mov eax, 4
   102 000000A5 BB01000000              	mov ebx, 1
   103 000000AA B9[00000000]            	mov ecx, userMsg
   104 000000AF BA24000000              	mov edx, lenUserMsg
   105 000000B4 CD80                    	int 80h
   106 000000B6 665A                    	pop		dx
   107 000000B8 6658                    	pop		ax
   108 000000BA C3                      	ret
   109                                  ; PrintString	ENDP
   110                                  
   111                                  
   112                                  ; GetAnInteger	PROC
   113                                  GetAnInteger:
   114 000000BB B803000000              	mov eax, 3
   115 000000C0 BB02000000              	mov ebx, 2
   116 000000C5 B9[3F000000]            	mov ecx, num
   117 000000CA CD80                    	int 0x80
   118 000000CC 89C2                    	mov edx, eax
   119 000000CE B804000000              	mov eax, 4
   120 000000D3 BB01000000              	mov ebx, 1
   121 000000D8 B9[3F000000]            	mov ecx, num
   122 000000DD CD80                    	int 80h
   123                                  
   124                                  ConvertStringToInteger:
   125 000000DF 66B80000                	mov ax, 0
   126 000000E3 66A3[02000000]          	mov [ReadInt], ax
   127 000000E9 B9[3F000000]            	mov ecx, num
   128 000000EE 66BB0000                	mov bx, 0
   129 000000F2 8A19                    	mov bl, byte [ecx]
   130                                  
   131                                  Next:
   132 000000F4 80EB30                  	sub bl, '0'
   133 000000F7 66A1[02000000]          	mov ax, [ReadInt]
   134 000000FD 66BA0A00                	mov dx, 10
   135 00000101 66F7E2                  	mul dx
   136 00000104 6601D8                  	add ax, bx
   137 00000107 66A3[02000000]          	mov [ReadInt], ax
   138                                  
   139 0000010D 66BB0000                	mov bx, 0
   140 00000111 83C101                  	add ecx, 1
   141 00000114 8A19                    	mov bl, byte [ecx]
   142                                  
   143 00000116 80FB0A                  	cmp bl, 0xA
   144 00000119 75D9                    	jne Next
   145 0000011B C3                      	ret
   146                                  ; GetAnInteger	ENDP
   147                                  
   148                                  ; ConvertIntegerToString	PROC
   149                                  ConvertIntegerToString:
   150 0000011C BB[3D000000]            	mov ebx, ResultValue + 4
   151                                  
   152                                  ConvertLoop:
   153 00000121 6629D2                  	sub dx, dx
   154 00000124 66B90A00                	mov cx, 10
   155 00000128 66F7F1                  	div cx
   156 0000012B 80C230                  	add dl, '0'
   157 0000012E 8813                    	mov [ebx], dl
   158 00000130 4B                      	dec ebx
   159 00000131 81FB[39000000]          	cmp ebx, ResultValue
   160 00000137 7DE8                    	jge ConvertLoop
   161 00000139 C3                      	ret
   162                                  ; ConvertIntegerToString	ENDP
