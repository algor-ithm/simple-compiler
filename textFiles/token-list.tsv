Lexeme	TokenType
CLASS	CLASS
LargestCommonDenominator	IDENTIFIER
{	LEFT_BRACE
CONST	CONST
M	IDENTIFIER
=	ASSIGN
7	NUMERIC_LITERAL
,	COMMA
N	IDENTIFIER
=	ASSIGN
85	NUMERIC_LITERAL
;	SEMI
VAR	VAR
X	IDENTIFIER
,	COMMA
Y	IDENTIFIER
,	COMMA
Z	IDENTIFIER
,	COMMA
Q	IDENTIFIER
,	COMMA
R	IDENTIFIER
;	SEMI
PROCEDURE	PROCEDURE
Multiply	IDENTIFIER
(	LEFT_PAREN
)	RIGHT_PAREN
{	LEFT_BRACE
VAR	VAR
A	IDENTIFIER
,	COMMA
B	IDENTIFIER
;	SEMI
A	IDENTIFIER
=	ASSIGN
X	IDENTIFIER
,	COMMA
B	IDENTIFIER
=	ASSIGN
Y	IDENTIFIER
,	COMMA
Z	IDENTIFIER
=	ASSIGN
0	NUMERIC_LITERAL
;	SEMI
WHILE	WHILE
B	IDENTIFIER
>	RELOP
0	NUMERIC_LITERAL
DO	DO
{	LEFT_BRACE
IF	IF
ODD	ODD
B	IDENTIFIER
THEN	THEN
Z	IDENTIFIER
=	ASSIGN
Z	IDENTIFIER
+	ADDOP
A	IDENTIFIER
;	SEMI
A	IDENTIFIER
=	ASSIGN
2	NUMERIC_LITERAL
*	MULOP
A	IDENTIFIER
;	SEMI
B	IDENTIFIER
=	ASSIGN
B	IDENTIFIER
/	DIVOP
2	NUMERIC_LITERAL
;	SEMI
}	RIGHT_BRACE
}	RIGHT_BRACE
PROCEDURE	PROCEDURE
Divide	IDENTIFIER
(	LEFT_PAREN
)	RIGHT_PAREN
{	LEFT_BRACE
VAR	VAR
W	IDENTIFIER
;	SEMI
R	IDENTIFIER
=	ASSIGN
X	IDENTIFIER
;	SEMI
Q	IDENTIFIER
=	ASSIGN
0	NUMERIC_LITERAL
;	SEMI
W	IDENTIFIER
=	ASSIGN
Y	IDENTIFIER
;	SEMI
WHILE	WHILE
W	IDENTIFIER
<=	RELOP
R	IDENTIFIER
DO	DO
W	IDENTIFIER
=	ASSIGN
2	NUMERIC_LITERAL
*	MULOP
W	IDENTIFIER
;	SEMI
WHILE	WHILE
W	IDENTIFIER
>	RELOP
Y	IDENTIFIER
DO	DO
{	LEFT_BRACE
Q	IDENTIFIER
=	ASSIGN
2	NUMERIC_LITERAL
*	MULOP
Q	IDENTIFIER
;	SEMI
W	IDENTIFIER
=	ASSIGN
W	IDENTIFIER
/	DIVOP
2	NUMERIC_LITERAL
;	SEMI
IF	IF
W	IDENTIFIER
<=	RELOP
R	IDENTIFIER
THEN	THEN
{	LEFT_BRACE
R	IDENTIFIER
=	ASSIGN
R	IDENTIFIER
-	SUBOP
W	IDENTIFIER
;	SEMI
Q	IDENTIFIER
=	ASSIGN
Q	IDENTIFIER
+	ADDOP
1	NUMERIC_LITERAL
;	SEMI
}	RIGHT_BRACE
}	RIGHT_BRACE
}	RIGHT_BRACE
PROCEDURE	PROCEDURE
GCD	IDENTIFIER
(	LEFT_PAREN
)	RIGHT_PAREN
{	LEFT_BRACE
VAR	VAR
F	IDENTIFIER
,	COMMA
G	IDENTIFIER
;	SEMI
F	IDENTIFIER
=	ASSIGN
X	IDENTIFIER
;	SEMI
G	IDENTIFIER
=	ASSIGN
Y	IDENTIFIER
;	SEMI
WHILE	WHILE
F	IDENTIFIER
G	IDENTIFIER
DO	DO
{	LEFT_BRACE
IF	IF
F	IDENTIFIER
<	RELOP
G	IDENTIFIER
THEN	THEN
G	IDENTIFIER
=	ASSIGN
G	IDENTIFIER
-	SUBOP
F	IDENTIFIER
;	SEMI
IF	IF
G	IDENTIFIER
<	RELOP
F	IDENTIFIER
THEN	THEN
F	IDENTIFIER
=	ASSIGN
F	IDENTIFIER
-	SUBOP
G	IDENTIFIER
;	SEMI
}	RIGHT_BRACE
Z	IDENTIFIER
=	ASSIGN
F	IDENTIFIER
;	SEMI
}	RIGHT_BRACE
X	IDENTIFIER
=	ASSIGN
M	IDENTIFIER
;	SEMI
Y	IDENTIFIER
=	ASSIGN
N	IDENTIFIER
CALL	CALL
Multiply	IDENTIFIER
(	LEFT_PAREN
)	RIGHT_PAREN
;	SEMI
X	IDENTIFIER
=	ASSIGN
25	NUMERIC_LITERAL
;	SEMI
Y	IDENTIFIER
=	ASSIGN
3	NUMERIC_LITERAL
;	SEMI
CALL	CALL
Divide	IDENTIFIER
(	LEFT_PAREN
)	RIGHT_PAREN
;	SEMI
X	IDENTIFIER
=	ASSIGN
84	NUMERIC_LITERAL
;	SEMI
Y	IDENTIFIER
=	ASSIGN
36	NUMERIC_LITERAL
CALL	CALL
GCD	IDENTIFIER
(	LEFT_PAREN
)	RIGHT_PAREN
;	SEMI
}	RIGHT_BRACE
